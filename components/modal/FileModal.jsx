import React, { useContext, useEffect, useRef, useState } from "react";
import Modal from "react-modal";
import "../../components/modal/ModalCss.scss";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faTimes, faFileLines, faXmark } from "@fortawesome/free-solid-svg-icons";
import { axiosDelete, axiosDownLoad, axiosFileAddUpload, axiosFileUpload } from "api/axiosFetch";
import { PageContext } from "components/PageProvider";
import FileUpload from "./FileUpload";

Modal.setAppElement("#root"); // Set the root element for accessibility

/* ÌååÏùºÏóÖÎ°úÎìú Î™®Îã¨ */
export default function FileModal(props) {
    const { width, height, isOpen, title, onClose, tableFileInfo } = props;
    const { setModalPageName, setIsModalTable, setFilePageName, setFileInfo, fileInfo } = useContext(PageContext);
    const [uploadFileData, setUploadFileData] = useState([]);
    const bodyRef = useRef(null);

    useEffect(() => {
        if (isOpen) {
            setFilePageName("Ï≤®Î∂ÄÌååÏùºÌåùÏóÖ");
            setIsModalTable(true);
        }
        return () => {
            setIsModalTable(false);
            setModalPageName("");
        };
    }, [isOpen]);

    useEffect(() => {
        // me-modal-bodyÏùò ÎÜíÏù¥Î•º ÎèôÏ†Å Í≥ÑÏÇ∞
        if (bodyRef.current) {
            const headerHeight = document.querySelector(".me-modal-header")?.clientHeight || 0;
            const footerHeight = document.querySelector(".me-modal-footer")?.clientHeight || 0;
            const calculatedHeight = height - headerHeight - footerHeight;
            bodyRef.current.style.height = `${calculatedHeight}px`;
        }
    }, [height]);

    /* ÏóÖÎ°úÎìúÎêú ÌååÏùº Ï†ÄÏû• */
    const onFileSelect = (acceptedFiles) => {
        console.log("ÏóÖÎ°úÎìúÌååÏùº:", acceptedFiles);
        setUploadFileData(acceptedFiles);
    };

    /* ÌôïÏù∏ Ïãú, ÌååÏùº ÏÑúÎ≤ÑÏóê Ï†ÄÏû• */
    const onClickSubmit = async () => {
        console.log("tableFileInfo:", tableFileInfo);
        if (tableFileInfo && tableFileInfo !== undefined) { //Í∏∞Ï°¥Î∂ÄÎ™®Ïóê ÏÉàÎ°úÏö¥ ÏûêÏãù Ï∂îÍ∞Ä
            try {
                // console.log("üíú uploadFileData:", uploadFileData, "tableFileInfo.parentId:", tableFileInfo.parentId);
                // const result = await axiosFileAddUpload(`/file/upload.do`, uploadFileData, tableFileInfo.parentId);
                const result = await axiosFileAddUpload(`/file/upload.do`, uploadFileData, tableFileInfo.parentId);
                if (result) {
                    console.log("üíú ÏÉàÎ°úÏö¥ÏûêÏãùÏ∂îÍ∞Ä:", result);
                    // console.log("0.ÌååÏùºÏù¥ Ï†ÄÏû•Îêú Ï†ïÎ≥¥:", result);
                    const children = result.map(item => ({
                        originalFileNm: item.originalFileNm,
                        fileId: item.fileId
                    }))
                    // setFileInfo(prev => ({ //Ï†ÑÏó≠Î≥ÄÏàò Ï†ÄÏû•
                    //     parentId: result[0].atchFileId,
                    //     childFile: {...prev.childFile, ...children},
                    //     fileLength: result.length
                    // }))
                    setFileInfo(result[0].atchFileId); //ÏûÑÏãú
                } else {
                    console.error("File upload failed.");
                }
            } catch (error) {
                console.error("Error uploading file:", error);
            }
            setUploadFileData([]); //Ï¥àÍ∏∞Ìôî
            onClose();
        } else { // ÏµúÏ¥à Ï†ÄÏû•
            try {
                const result = await axiosFileUpload(`/file/upload.do`, uploadFileData);
                if (result) {
                    console.log("üíú ÏµúÏ¥àÏ†ÄÏû•:", result);
                    const children = result.map(item => ({
                        originalFileNm: item.originalFileNm,
                        fileId: item.fileId
                    }))
                    setFileInfo(result[0].atchFileId);//ÏûÑÏãú
                    // setFileInfo({ //Ï†ÑÏó≠Î≥ÄÏàò Ï†ÄÏû•
                    //     parentId: result[0].atchFileId,
                    //     childFile: children,
                    //     fileLength: result.length
                    // })
                } else {
                    console.error("File upload failed.");
                }
            } catch (error) {
                console.error("Error uploading file:", error);
            }
            setUploadFileData([]); //Ï¥àÍ∏∞Ìôî
            onClose();
        }
    };

    useEffect(() => {
        console.log("üíú Ï†ÑÏó≠Î≥ÄÏàò Ï†ÄÏû•: ", fileInfo);
    }, [fileInfo])

    /* ÌååÏùºÏóÖÎ°úÎìú */
    const clickDownLoad = async (row) => {
        try {
            const result = await axiosDownLoad(`/file/download.do`, { fileId: row.fileId });
            if (result) {
                alert(`${row.originalFileNm}ÌååÏùºÏù¥ Îã§Ïö¥Î°úÎìú ÎêòÏóàÏäµÎãàÎã§`);
            }
        } catch (error) {
            console.error("Error");
        }
    };

    /* ÌååÏùºÏÇ≠Ï†ú */
    const clickDelete = async (row) => {
        try {
            const result = await axiosDelete(`/file/removeCompletely.do`, { fileId: row.fileId });
            console.log("üíú ÌååÏùºÏÇ≠Ï†ú:", result);
            if (result) {
                alert(`${row.originalFileNm}ÌååÏùºÏù¥ ÏÇ≠Ï†ú ÎêòÏóàÏäµÎãàÎã§`);
            }
        } catch (error) {
            console.error("Error");
        }
    };

    return (
        <Modal
            appElement={document.getElementById("root")}
            isOpen={isOpen}
            onRequestClose={onClose}
            contentLabel={title}
            style={{ content: { width, height } }}
        >
            <div className="me-modal">
                <div className="me-modal-container" style={{ width, height }}>
                    <div className="me-modal-inner">
                        <div className="me-modal-header">
                            <h4 className="header-title">{title}</h4>
                            <div className="header-close" onClick={onClose}>
                                <FontAwesomeIcon icon={faTimes} className="button" size="lg" />
                            </div>
                        </div>

                        <div className="me-modal-body" ref={bodyRef}>
                            <div className="body-area" style={{ gap: 0 }}>
                                {/* ÌååÏùº ÏóÖÎ°úÎìú */}
                                <FileUpload onFileSelect={onFileSelect} />
                            </div>
                            <div>
                                {tableFileInfo?.childFile?.map((row, index) => (
                                    <div style={{ display: "flex" }}>
                                        <button
                                            className="fileBtn"
                                            onClick={() => {
                                                clickDownLoad(row);
                                            }}
                                            key={index}>
                                            <FontAwesomeIcon icon={faFileLines} style={{ fontSize: "23px", marginRight: "20px" }} />
                                            {row.originalFileNm}
                                        </button>
                                        <button
                                            className="xBtn"
                                            onClick={() => {
                                                clickDelete(row);
                                            }}
                                            key={index}>
                                            <FontAwesomeIcon icon={faXmark} style={{ fontSize: "23px" }} />
                                        </button>
                                    </div>
                                ))}
                            </div>
                        </div>
                        <div className="me-modal-footer mg-t-10 mg-b-20">
                            <div className="table-buttons" style={{ justifyContent: "center" }}>
                                <button className="table-btn table-btn-default" style={{ width: "100%" }} onClick={onClose}>
                                    Ï∑®ÏÜå
                                </button>
                                <button
                                    className="table-btn table-btn-primary"
                                    style={{ width: "100%" }}
                                    onClick={() => {
                                        onClickSubmit();
                                    }}>
                                    ÌôïÏù∏
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Modal>
    );
}
